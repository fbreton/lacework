#compdef lacework
#autoload

#author: fred.breton@lacework.net

local IFS=$'\n'

local curcontext="$curcontext" state line
typeset -A opt_args

_arguments -C \
    '-p:flagp:->flagp' \
    '--subaccount:suba:->suba' \
    '1:command:->command' \
    '2:arg1:->arg1' \
    '3:arg2:->arg2' \
    '4:arg3:->arg3' \
    '5:arg4:->arg4' \
    '6:arg5:->arg5'
    
local __lw_cmd=""
local -i __index=${words[(I)-p]}
local -i __indexsu=${words[(I)--subaccount]}
local __flagpst="" __flagpv="" __suba="" __subav=""

if ((__index > 0)); then
    __flagpst="-p"
    __flagpv=$words[__index+1]
fi

if ((__indexsu > 0)); then
    __suba="--subaccount"
    __subav=$words[__indexsu+1]
fi

case $state in
    # Completion for -p to switch between profiles configured at ~/.lacework.toml
    flagp)
        __lw_cmd=(
            $(lacework configure list --noninteractive | awk 'NR>2 { if ($1==">" && NF==7) print $2": account=",$3,",subaccount=",$4; else if ($1==">") print $2": account=",$3;
                    else if (NF==6) print $1": account=",$2,",subaccount=",$3; else print $1": account=",$2}' )
            )
    ;;
    
    suba)
    # Completion for --subaccount 
        __lw_cmd=(
            $(lacework $__flagpst $__flagpv account list --json |jq -r '.[] | .accounts[] | .accountName')
        )
    ;;
    
    command)
    # Completion for the first argument
        __lw_cmd=(
            $(lacework -h --noninteractive | awk '/Available Commands:/{f=1} /Flags/{f=0} f' | awk 'NR>1 && $1!="" {f1=$1;$1="";print f1":",$0}')
        )
    ;;

    arg1)
    # Completion for the second argument
        [ $line[1] = "api" ] && __lw_cmd=('get' 'post' 'patch' 'delete') || 
        __lw_cmd=(
            $(lacework --noninteractive $line[1] -h | awk '/Available Commands:/{f=1} /Flags/{f=0} f' | awk 'NR>1 && $1!="" {f1=$1;$1="";print f1":",$0}')
        )
    ;;
    
    arg2)
        case $line[2] in
        #Completion for the 2nd argument of integration, event and configure 
            show|delete|open)
                [ $line[1] = "integration" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav integration list --json | jq -r '.[] | .INTG_GUID |= sub(":";"\\:";"g") | .INTG_GUID + ":Name\\: " + .NAME + ", Type\\: " + .TYPE_NAME')
                    )
                [ $line[1] = "event" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav event list --severity critical --severity high --days 7 --json| jq -r '.[] | .event_id + ":Type\\: " + .event_type + ", Start time: " + .start_time')
                    )
                [ $line[1] = "configure" ] && __lw_cmd=(
                    $(lacework --noninteractive $line[1] $line[2] -h | awk '/The available configuration keys are:/{f=1} /To show the configuration/{f=0} f' | awk 'NR>1 && $1!="" {print $2}')
                )
            ;;

        #Completion for the 2nd argument of other command than integration, event and configure
            *)
                __lw_cmd=(
                    $(lacework --noninteractive $line[1] $line[2] -h | awk '/Available Commands:/{f=1} /Flags/{f=0} f' | awk 'NR>1 && $1!="" {gsub(/:/,"\\:",$1); f1=$1;$1="";print f1":",$0}')
                )
            ;;
        esac
    ;;
    
    arg3)
        case $line[3] in
        #Completion for lacework agent token show|update
            show|update)
                [ $line[2] = "token" ] && [ $line[1] = "agent" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav agent token list | awk 'NR>2 && NF==3 { gsub(/:/,"\\:",$1); print $1":",$2," | ",$3 }' )
                    )
            ;;
        #Completion for lacework compliance aws|azure|google
            get-report|run-assessment|list-subscriptions|list-projects)
                [ $line[1] = "compliance" ] && [ $line[2] = "aws" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav compliance aws list-accounts | awk 'NR>2 { gsub(/:/,"\\:",$1); print $1 }' )
                    )
                [ $line[1] = "compliance" ] && [ $line[2] = "azure" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav compliance azure list-tenants | awk 'NR>2 { gsub(/:/,"\\:",$1); print $1 }' )
                    )
                [ $line[1] = "compliance" ] && [ $line[2] = "google" ] && {
                    __aux=$(lacework $__flagpst $__flagpv $__suba $__subav integration list --json)
                    [ -z "$(echo $__aux | jq -r '.[] | select(.TYPE == "GCP_CFG")')" ] ||
                    __lw_cmd=(
                    ${$(echo $__aux | jq -r '.[] | select(.TYPE == "GCP_CFG" and .DATA.ID_TYPE == "ORGANIZATION") | .DATA.ID + ":Name\\: " + .NAME'):-n/a}
                    )} 
            ;;
            
        #Completion for lacework vulnerability host list-hosts
            list-hosts)
                [ $line[1] = "vulnerability" ] && [ $line[2] = "host" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav vulnerability host list-cves --active --severity critical --severity high --json | jq -r '.[] | .packages[].namespace |= sub(":";"\\:";"g") | .cve_id + ":OS\\: " + ([.packages[].namespace] | join(", ")) + "; #Host\\: " + ([.packages[].host_count |tonumber] | add | tostring) + "; #Critical\\: " + (.summary.severity.Critical.vulnerabilities | tostring) + "; #High\\: " + (.summary.severity.High.vulnerabilities | tostring)')
                )
            ;;
        
        #Completion for lacework vulnerability container scan
            scan)
                [ $line[1] = "vulnerability" ] && [ $line[2] = "container" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav vulnerability container list-assessments --json | jq -r '.[] | select(.image_scan_status == "Success") | .image_registry' )
                )  
            ;;
            
        #Completion for lacework vulnerability container show-assessment
            show-assessment)
                [ $line[1] = "vulnerability" ] && [ $line[2] = "container" ] && __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav vulnerability container list-assessments --json | jq -r '.[] | .image_digest |= sub(":";"\\:";"g") | select((.image_scan_status == "Success") and (.image_digest != "")) | .image_digest + ":Registry\\:" + .image_registry + ", Repository\\: " + .image_repo' )
                )
            ;;
        
        #Completion for other 4th arguments
            *)
                __lw_cmd=(
                    $(lacework --noninteractive $line[1] $line[2] $line[3] -h | awk '/Available Commands:/{f=1} /Flags/{f=0} f' | awk 'NR>1 && $1!="" {gsub(/:/,"\\:",$1);f1=$1;$1="";print f1":",$0}')
                )
            ;;
            
        esac
    ;;
    
    arg4)
        if [ $line[2] = "azure" ] && [ $line[3] != "list-subscriptions" ] ; then
            __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav compliance azure list-subscriptions $line[4] | awk 'NR>2 { gsub(/:/,"\\:",$1); print $1":",$2 }' )
                )
        elif [ $line[3] = "scan" ] && [ $line[1] = "vulnerability" ] && [ $line[2] = "container" ]; then
            __lw_cmd=(
                    $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav vulnerability container list-assessments --json | jq -r --arg reg $line[4] '.[] | select((.image_scan_status == "Success") and (.image_registry == $reg)) | .image_repo' )
                )
        elif [ $line[2] = "google" ] && [ $line[3] != "list-projects" ] ; then
            __lw_cmd=(
                    $(lacework --json $__flagpst $__flagpv $__suba $__subav compliance google list-projects $line[4] | jq -r '.projects[] | .id |= sub(":";"\\:";"g") | .id + ":Alias\\: " + .alias' )
                ) || __lw_cmd=""
        else
            __lw_cmd=(
                    $(lacework --noninteractive $line[1] $line[2] $line[3] $line[4] -h | awk '/Available Commands:/{f=1} /Flags/{f=0} f' | awk 'NR>1 && $1!="" {gsub(/:/,"\\:",$1);f1=$1;$1="";print f1":",$0}')
                )
        fi  
    ;;
    
    arg5)
        [ $line[3] = "scan" ] && [ $line[1] = "vulnerability" ] && [ $line[2] = "container" ] && __lw_cmd=(
            $(lacework --noninteractive $__flagpst $__flagpv $__suba $__subav vulnerability container list-assessments --json | jq -r --arg reg $line[4] --arg repo $line[5] '.[] | select((.image_scan_status == "Success") and (.image_registry == $reg) and (.image_repo == $repo)) | .image_tags[]' )
        )
    ;;
esac

_describe -t commands 'lacework command' __lw_cmd

return 0

